name: Pull Request Approval Workflow
run-name: ${{ inputs.pr_number != '' && format('Test Assign Reviewers for PR \#{0}', inputs.pr_number) || format('Assign Reviewers for PR \#{0} to {1}', github.event.pull_request.number, github.base_ref) }}

on: 
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]
  pull_request_review:
    types: [submitted]
  workflow_dispatch:
    inputs:
      yaml_filename:
        description: 'The filename of the YAML configuration file'
        required: false
        default: 'REVIEWERS.yml'
      pr_number:
        description: 'Override the PR number (for testing purposes)'
      team-name:
        description: 'The name of the team to assign the reviewers for PR approval'
        required: false
        default: 'Team-Test-Creation-A'
        type: string

permissions:
  actions: read
  contents: read
  pull-requests: write
  checks: write

jobs:
  validate-pr-requirements:
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.check-reviews.outputs.status }}
    environment: 
      name: cloud-platform
    steps:
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_KEY }}
          owner: ${{ github.repository_owner }}

      - uses: actions/checkout@v4

      - name: Install js-yaml
        run: npm install js-yaml

      - name: Read and Validate PR Requirements
        id: check-reviews
        uses: actions/github-script@v7
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          TEAM_NAME: ${{ github.event.inputs.team-name || 'Team-Test-Creation-A' }}
        with:
          script: |
            const fs = require('fs');
            const yaml = require('js-yaml');

            // Load REVIEWERS.yml
            const config = yaml.load(fs.readFileSync('REVIEWERS.yml', 'utf8'));
            const prNumber = context.issue.number;
            const targetBranch = context.payload.pull_request.base.ref;
            const teamName = process.env.TEAM_NAME;

            // Replace team name placeholders in the configuration
            const replacePlaceholders = (str) => 
              str.replace(/\{\{\s*team_name\s*\}\}/g, teamName);

            // Find branch-specific configuration
            const branchConfig = Object.entries(config.pull_requests.branches)
              .find(([pattern, config]) => {
                const regex = new RegExp('^' + pattern.replace('*', '.*') + '$');
                return regex.test(targetBranch) && 
                       !(config.exclude && config.exclude.includes(targetBranch));
              })?.[1];

            if (!branchConfig) {
              core.setFailed(`No configuration found for branch ${targetBranch}`);
              return;
            }

            // Expand team members
            async function expandTeamMembers(teams, github, logger) {
              const teamMembers = [];
              
              for (const team of teams) {
                const resolvedTeam = replacePlaceholders(team);
                
                try {
                  // First, try to list team members directly
                  try {
                    const { data: members } = await github.rest.teams.listMembersInOrg({
                      org: context.repo.owner,
                      team_slug: resolvedTeam
                    });
                    teamMembers.push(...members.map(member => member.login));
                    continue;
                  } catch (directListError) {
                    // If direct listing fails, attempt alternative retrieval methods
                    
                    // Try to get team information first
                    let teamInfo;
                    try {
                      teamInfo = await github.rest.teams.getByName({
                        org: context.repo.owner,
                        team_slug: resolvedTeam
                      });
                    } catch (teamLookupError) {
                      logger.warning(`Could not find team ${resolvedTeam}: ${teamLookupError.message}`);
                      continue;
                    }
                    
                    // If team found, attempt to list members using team ID
                    if (teamInfo && teamInfo.data && teamInfo.data.id) {
                      try {
                        const { data: members } = await github.rest.teams.listMembersInTeam({
                          team_id: teamInfo.data.id
                        });
                        teamMembers.push(...members.map(member => member.login));
                      } catch (membersError) {
                        logger.warning(`Could not list members for team ${resolvedTeam}: ${membersError.message}`);
                      }
                    }
                  }
                } catch (error) {
                  logger.warning(`Unexpected error processing team ${resolvedTeam}: ${error.message}`);
                }
              }
              
              // Remove duplicates and handle case where no members found
              return [...new Set(teamMembers)];
            }

            // Process reviewers
            const reviewTeams = (branchConfig.review_teams || []).map(replacePlaceholders);
            const reviewers = await expandTeamMembers(reviewTeams);

            // Get PR reviews
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });

            // Validate required reviews
            const requiredApprovals = branchConfig.required_approvals || 0;
            const requiredTeams = (branchConfig.required_teams || []).map(replacePlaceholders);

            const requiredTeamMembers = await expandTeamMembers(requiredTeams);
            const requiredReviewStatus = requiredTeamMembers.map(reviewer => 
              reviews.some(r => r.user.login === reviewer && r.state === 'APPROVED')
            );

            const requiredApprovalsCount = requiredReviewStatus.filter(Boolean).length;
            const isValid = requiredApprovalsCount >= requiredTeamMembers.length;

            core.setOutput('status', isValid);

            if (!isValid) {
              core.setFailed(`PR does not meet review requirements. 
                Required team reviewers: ${requiredTeamMembers.length} (${requiredApprovalsCount} approved)`);
            }

  block-merge:
    needs: validate-pr-requirements
    if: needs.validate-pr-requirements.outputs.status == 'false'
    runs-on: ubuntu-latest
    environment: 
      name: cloud-platform
    steps:
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Block Merge
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.app-token.outputs.token }}
          script: |
            github.rest.pulls.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              mergeable_state: 'blocked'
            });

  assign-reviewers-and-assignees:
    needs: validate-pr-requirements
    runs-on: ubuntu-latest
    environment: 
      name: cloud-platform
    steps:
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_KEY }}
          owner: ${{ github.repository_owner }}

      - uses: actions/checkout@v4
      
      - name: Install js-yaml
        run: npm install js-yaml

      - name: Assign Reviewers and Assignees
        uses: actions/github-script@v7
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
          TEAM_NAME: ${{ github.event.inputs.team-name || 'Team-Test-Creation-A' }}
        with:
          script: |
            const fs = require('fs');
            const yaml = require('js-yaml');

            // Load REVIEWERS.yml
            const config = yaml.load(fs.readFileSync('REVIEWERS.yml', 'utf8'));
            const targetBranch = context.payload.pull_request.base.ref;
            const prNumber = context.issue.number;
            const teamName = process.env.TEAM_NAME;

            // Replace team name placeholders in the configuration
            const replacePlaceholders = (str) => 
              str.replace(/\{\{\s*team_name\s*\}\}/g, teamName);

            // Find branch-specific configuration
            const branchConfig = Object.entries(config.pull_requests.branches)
              .find(([pattern, config]) => {
                const regex = new RegExp('^' + pattern.replace('*', '.*') + '$');
                return regex.test(targetBranch) && 
                       !(config.exclude && config.exclude.includes(targetBranch));
              })?.[1];

            if (!branchConfig) {
              console.log(`No configuration found for branch ${targetBranch}`);
              return;
            }

            // Expand team members
            async function expandTeamMembers(teams, github, core) {
              const teamMembers = [];
              
              for (const team of teams) {
                const resolvedTeam = replacePlaceholders(team);
                
                try {
                  // First, try to list team members directly
                  try {
                    const { data: members } = await github.rest.teams.listMembersInOrg({
                      org: context.repo.owner,
                      team_slug: resolvedTeam
                    });
                    teamMembers.push(...members.map(member => member.login));
                    continue;
                  } catch (directListError) {
                    // If direct listing fails, attempt alternative retrieval methods
                    
                    // Try to get team information first
                    let teamInfo;
                    try {
                      teamInfo = await github.rest.teams.getByName({
                        org: context.repo.owner,
                        team_slug: resolvedTeam
                      });
                    } catch (teamLookupError) {
                      core.warning(`Could not find team ${resolvedTeam}: ${teamLookupError.message}`);
                      continue;
                    }
                    
                    // If team found, attempt to list members using team ID
                    if (teamInfo && teamInfo.data && teamInfo.data.id) {
                      try {
                        const { data: members } = await github.rest.teams.listMembersInTeam({
                          team_id: teamInfo.data.id
                        });
                        teamMembers.push(...members.map(member => member.login));
                      } catch (membersError) {
                        core.warning(`Could not list members for team ${resolvedTeam}: ${membersError.message}`);
                      }
                    }
                  }
                } catch (error) {
                  core.warning(`Unexpected error processing team ${resolvedTeam}: ${error.message}`);
                }
              }
              
              // Remove duplicates and handle case where no members found
              return [...new Set(teamMembers)];
            }

            // Process reviewers and assignees
            const reviewTeams = (branchConfig.review_teams || []).map(replacePlaceholders);
            const assigneeTeams = (branchConfig.assignees || []).map(replacePlaceholders);

            const reviewers = await expandTeamMembers(reviewTeams);
            const assignees = await expandTeamMembers(assigneeTeams);

            // Assign reviewers
            if (reviewers.length > 0) {
              await github.rest.pulls.requestReviewers({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                reviewers: reviewers
              });
              console.log(`Assigned reviewers: ${reviewers.join(', ')}`);
            }

            // Assign assignees
            if (assignees.length > 0) {
              await github.rest.issues.addAssignees({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                assignees: assignees
              });
              console.log(`Assigned assignees: ${assignees.join(', ')}`);
            }