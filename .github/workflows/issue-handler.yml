name: Configuration Management

on:
  issues:
    types: 
      - opened
      - edited
  issue_comment:
    types:
      - created
      - edited

permissions:
  issues: write
  contents: write
  pull-requests: write

jobs:
  config-management:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml PyGithub

      - name: Prepare Configuration Management Script
        run: |
          cat > config_management_handler.py << 'EOF'
          import os
          import re
          import sys
          import yaml
          import json
          import logging
          from github import Github

          class InteractiveConfigManager:
              def __init__(self, github_token, organization):
                  logging.basicConfig(level=logging.INFO)
                  self.logger = logging.getLogger(__name__)
                  self.g = Github(github_token)
                  self.org = self.g.get_organization(organization)

              def process_configuration(self, issue, config_type, config):
                  """
                  Process configuration based on type and provide interactive feedback
                  """
                  try:
                      if 'repository' in config:
                          if 'visibility' in config['repository']:
                              return self._handle_repository_creation(issue, config['repository'])
                          else:
                              return self._handle_repository_update(issue, config['repository'])
                      elif 'team' in config:
                          # Future implementation for team management
                          return self._handle_team_configuration(issue, config['team'])
                      else:
                          raise ValueError(f"Unsupported configuration: {config}")
                  
                  except Exception as e:
                      self.logger.error(f"Configuration processing error: {e}")
                      return False

              def _handle_repository_creation(self, issue, config):
                  """Handle repository creation with interactive workflow"""
                  try:
                      repo_name = config.get('name')
                      
                      # Environment setup for repository creation
                      os.environ['GITHUB_TOKEN'] = self.g.get_access_token().token
                      os.environ['GITHUB_ORGANIZATION'] = self.org.login
                      os.environ['REPOSITORY_NAME'] = repo_name
                      os.environ['GITHUB_WORKSPACE'] = os.getcwd()

                      # Import and use the existing repository creation script
                      from repository_creation import RepositoryCreator, main as repo_creation_main

                      creator = RepositoryCreator(
                          os.environ['GITHUB_TOKEN'], 
                          os.environ['GITHUB_ORGANIZATION']
                      )

                      # Use default configuration with provided name
                      config = creator.load_default_config(repo_name)
                      config.update(config)

                      # Create GitHub repository
                      repo = creator.create_github_repository(repo_name, config)

                      if repo:
                          # Create repository configuration file
                          config_file = creator.create_repository_config(
                              repo_name, config, os.environ['GITHUB_WORKSPACE']
                          )

                          response = f"""
                          ## 🚀 Repository Creation Successful

                          ✅ Repository `{repo_name}` created successfully!

                          ### Configuration Details:
                          ```yaml
                          {yaml.dump({'repository': config}, default_flow_style=False)}
                          ```

                          ### Next Steps:
                          - [x] Repository created
                          - [ ] Review configuration
                          - [ ] Make additional changes

                          To modify the repository configuration, reply with updated YAML.
                          """
                          issue.create_comment(response)
                          return True
                      
                      return False

                  except Exception as e:
                      self.logger.error(f"Repository creation error: {e}")
                      issue.create_comment(f"❌ Repository creation failed: {str(e)}")
                      return False

              def _handle_repository_update(self, issue, config):
                  """Handle repository update with interactive workflow"""
                  try:
                      repo_name = config.get('name')
                      
                      # Environment setup for repository management
                      os.environ['GITHUB_TOKEN'] = self.g.get_access_token().token
                      os.environ['GITHUB_ORGANIZATION'] = self.org.login
                      os.environ['GITHUB_WORKSPACE'] = os.getcwd()

                      # Import and use the existing repository management script
                      from repository_manage import RepositoryUpdater

                      updater = RepositoryUpdater(
                          os.environ['GITHUB_TOKEN'], 
                          os.environ['GITHUB_ORGANIZATION']
                      )

                      # Locate the configuration file
                      config_path = os.path.join(
                          os.environ['GITHUB_WORKSPACE'], 
                          f'repositories/{repo_name}/repository.yml'
                      )

                      # Update repository
                      changes = updater.update_github_repository(repo_name, config)

                      response = f"""
                      ## 🔄 Repository Update Successful

                      ✅ Repository `{repo_name}` updated successfully!

                      ### Changes Applied:
                      {yaml.dump(changes, default_flow_style=False)}

                      ### Updated Configuration:
                      ```yaml
                      {yaml.dump({'repository': config}, default_flow_style=False)}
                      ```

                      ### Next Steps:
                      - [x] Configuration updated
                      - [ ] Review changes
                      - [ ] Make additional modifications

                      To further modify the repository, reply with updated YAML.
                      """
                      issue.create_comment(response)
                      return True

                  except Exception as e:
                      self.logger.error(f"Repository update error: {e}")
                      issue.create_comment(f"❌ Repository update failed: {str(e)}")
                      return False

              def _handle_team_configuration(self, issue, config):
                  # Placeholder for future team management implementation
                  issue.create_comment("Team configuration not yet implemented.")
                  return False

          def main():
              github_token = os.environ.get('GITHUB_TOKEN')
              github_org = os.environ.get('GITHUB_ORGANIZATION')
              issue_number = os.environ.get('GITHUB_ISSUE_NUMBER')
              event_path = os.environ.get('GITHUB_EVENT_PATH')

              # Read GitHub event payload
              with open(event_path, 'r') as f:
                  event_data = json.load(f)

              # Initialize GitHub client
              g = Github(github_token)
              repo = g.get_repo(os.environ.get('GITHUB_REPOSITORY'))
              issue = repo.get_issue(int(issue_number))

              # Parse configuration from the issue body
              config_manager = InteractiveConfigManager(github_token, github_org)
              
              # Extract YAML configuration from issue body
              yaml_match = re.search(r'```yaml\n(.*?)```', issue.body, re.DOTALL)
              if yaml_match:
                  try:
                      config = yaml.safe_load(yaml_match.group(1))
                      config_manager.process_configuration(issue, 'configuration', config)
                  except Exception as e:
                      issue.create_comment(f"❌ Configuration parsing error: {str(e)}")

          if __name__ == '__main__':
              main()
          EOF

      - name: Process Configuration
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_ORGANIZATION: ${{ github.repository_owner }}
          GITHUB_ISSUE_NUMBER: ${{ github.event.issue.number }}
          GITHUB_EVENT_PATH: ${{ github.event_path }}
        run: |
          python config_management_handler.py